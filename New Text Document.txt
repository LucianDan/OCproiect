#include<stdio.h>
#include<stdlib.h>
struct arbore {
	int cheie;
	int parinte;
}arb[100];

int lungime;
int nod_afisat[1000] = {0}; //pentru inordine
void insereaza_radacina(int cheie_parinte) {
	if(lungime != 0 ) {
		for(int i = 0; i < lungime; i++){
			arb[i].parinte = 0;
			arb[i].cheie = 0;
		}
	}
	lungime = 1; 
	arb[0].cheie = cheie_parinte;
	arb[0].parinte = 0;
}

void insereaza_cheie(int cheie, int cheie_parinte){
	for(int i = 0; i < lungime; i++) 
		if(cheie_parinte == arb[i].cheie) {
			arb[lungime].parinte = i + 1;
			arb[lungime].cheie = cheie;
			lungime++;
			break;
		}
}

int cauta_cheie(int cheie) {
	for(int i = 0; i < lungime; i++) 
		if( arb[i].cheie == cheie)
			return 1;
	return 0;
}

int sterge_cheie(int cheie) {
	int i = 0;
	while(arb[i].cheie != cheie && i < lungime) {
		i++;
	}
	if( i == lungime)
		return 0;
	else {
		while( i < lungime){
			arb[i - 1].cheie = arb[i].cheie;
			arb[i - 1].parinte = arb[i].parinte;
			i++;
		}
		lungime--;
		return 1;
	}
}

void preordine(int parinte, int index) {
	for(int i = index; i < lungime; i++) {
		if(arb[i].parinte == parinte){
			printf("%i ", arb[i].cheie);
			preordine(i + 1, parinte + 1);
		}
	}
}

void postordine(int parinte, int index) {
	for(int i = index; i < lungime; i++) {
		if(arb[i].parinte == parinte){
			postordine(i + 1, parinte + 1);
			printf("%i ", arb[i].cheie);
		}
	}
}
//afiseaza si un 0 la final...trebuie o conditie suplimentara in if-uri 
void inordine(int parinte, int index) {
	
	for(int i = index; i < lungime; i++) {
		if(arb[i].parinte == parinte){
			
			inordine(i + 1, parinte + 1);
			if(nod_afisat[i] == 0 ){
				printf("%i ", arb[i].cheie);
				nod_afisat[i] = 1;
			}
			if(nod_afisat[arb[i].parinte -1] == 0) {
				//printf("%i ", i);
				printf("%i ", arb[arb[i].parinte - 1].cheie);
				nod_afisat[arb[i].parinte - 1] = 1;
			}
		}
	}
}
int frunza(int parinte) {
	for(int i = 0; i < lungime; i++) 
		if(parinte == arb[i].parinte)
			return 0;
	return 1;
}
int grad_arbore(){
	int nr = 0;
	for(int i = 0; i <= lungime; i++) 
		if(frunza(i))
			nr++;
	return nr;
}
int  inaltime_arbore() {
	int max =0, aux;
	int parinte;
	for(int i = 0; i <= lungime; i++) {
		if(frunza(i)) {
			parinte = arb[i].parinte;
			aux = 1;
			do{
				aux++;
				parinte = arb[parinte].parinte;
				
			}while(parinte > 1);
			if(aux > max)
				max = aux;
		}
	}
	return max;
}
int cel_mai_din_stanga_frate( int cheie ) {
	int i;
	for(i = 0; i < lungime; i++) {//caut parintele
		if(cheie == arb[i].cheie) {
			break;
		}
	}
	for(int j = 0; j < i; j++)
		if(arb[j].parinte == arb[i].parinte)
			return arb[j].cheie;
	return -1;
}
int cel_mai_din_dreapta_frate( int cheie ) {
	int i;
	int aux = 0;
	for(i = 0; i < lungime; i++) {//caut parintele
		if(cheie == arb[i].cheie) {
			break;
		}
	}
	for(int j = i + 1; j < lungime; j++)
		if(arb[j].parinte == arb[i].parinte)
			aux = arb[j].cheie;
	if (aux == 0) return -1;
	else return aux;
}

int numar_frati(int cheie) {
	int i;
	int nr = -1;//e pe -1 fiindca numar implicit si nodul trimis ca paramentru 
	for(i = 0; i < lungime; i++) {//caut parintele
		if(cheie == arb[i].cheie) {
			break;
		}
	}
	for(int j = 0; j < lungime; j++)
		if(arb[j].parinte == arb[i].parinte)
			nr++;
	return nr;
}

int main() {
	insereaza_radacina(1);
	insereaza_cheie(2,1);
	insereaza_cheie(3,1);
	insereaza_cheie(4,1);
	insereaza_cheie(5,2);
	insereaza_cheie(6,2);
	insereaza_cheie(7,4);
	insereaza_cheie(8,4);
	insereaza_cheie(9,4);
	preordine(0, 0);
	printf("\n");
	inordine(0, 0);
	printf("\n");
	postordine(0, 0);
	printf("\n");
	printf("%i",inaltime_arbore());
	printf("\n");
	printf("%i",grad_arbore());
	printf("\n");
	printf("%i",cel_mai_din_stanga_frate(9));
	printf("\n");
	printf("%i",cel_mai_din_dreapta_frate(7));
	printf("\n");
	printf("%i", numar_frati(9));
	printf("\n");
	for(int i = 0; i < lungime; i++) {
		printf("%i %i\n" ,arb[i].parinte, arb[i].cheie);
	}
}